[timeout:300];

area["name:en"="Flanders"] -> .BE;

(
  node(area.BE);
) -> .allnodesinArea;
(
  rel(bn.allnodesinArea)
    ["type"="route"]
    ["route"~"bus|tram"]
  ->.routes;                                    // All bus and tram route relations
  .routes << ->.route_masters;                  // Their route_master parent relations
  (
    node.allnodesinArea
      ["highway"="bus_stop"]
    ->.stops;
    node.allnodesinArea
      ["amenity"="bus_station"]
    ->.busstations;
    node.allnodesinArea
      ["railway"="tram_stop"]
    ->.tstops;
    node.allnodesinArea
      ["public_transport"]
    ->.platforms;
    node
      ["highway"="bus_stop"]
      ["operator"~"De Lijn"];
    node
      ["railway"="tram_stop"]
      ["operator"~"De Lijn"];
    node
      ["public_transport"="platform"]
      ["operator"~"De Lijn"];
  ) -> .stopsPlatformsAndStopPositions;            // All bus_stop, tram_stop, platform nodes 
                                                   // inside of Belgium and some outside of Belgium
                                                   // in case they are served by De Lijn or TEC
  (
    way(bn.allnodesinArea)
      ["highway"="bus_guideway"];
    way(bn.allnodesinArea)
      ["railway"="tram"];
  ) ->.tracks;                                     // all bus_guideways and tram rails
  node(w.tracks);                                  // and their nodes
  way(bn.allnodesinArea)
    ["amenity"="shelter"]
    ["shelter_type"="public_transport"]
  ->.shelters;                                      // all PT shelters
  node(w.shelters);                                 // and their nodes
  node.allnodesinArea
    ["amenity"="shelter"]
    ["shelter_type"="public_transport"]
  ->.shelternodes;                                  // shelters mapped as nodes
  node(r.routes);                                   // nodes for all the routes
  way(bn)->.parentways1;                            // the ways they belong to
  node(w.parentways1);                              // all nodes for those ways
  rel(bw.parentways1);                              // and all relations they are members of
  way(r.routes);                                    // member ways of all the routes
  node(w);                                          // and their nodes
  //way(bn);                                          // side ways of these ways
  //node(w);                                          // and their nodes too
  way(bn.stopsPlatformsAndStopPositions);           // parent ways for platforms and stop_positions
  rel(bn.stopsPlatformsAndStopPositions)
    ["type"="public_transport"]
  -> .stopAttributes;                               // stop_area relations
  (
  rel(br.stopAttributes) -> .SAG;                   // stop_area_group relations
  rel(br.SAG) -> .SAG2;                             // parents of stop_area_group relations 
  rel(br.SAG2);                                     // grandparents of stop_area_group relations 
  ) -> .stop_areas_and_groups;
  //r.stop_areas_and_groups >>;
  node(r.stopAttributes);
  way(r.stopAttributes);
  node(w);
);
out meta;
